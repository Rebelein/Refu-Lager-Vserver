/**
 * @fileoverview Firestore Security Rules for the inventory management application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access by enforcing strict ownership and role-based access control where appropriate.
 * Public read access is only granted for specific collections where it's explicitly intended.
 * Data consistency is enforced through validation of key fields on write operations.
 *
 * Data Structure:
 * - /articles/{articleId}: Stores individual article documents. Publicly readable.
 * - /machines/{machineId}: Stores individual machine documents. Publicly readable.
 * - /app_settings/global: Stores global application settings in a single document. Read and write access is disallowed for all users.
 *
 * Key Security Decisions:
 * - App Settings are not editable through the client.
 * - Public read access is granted to the articles and machines collections.
 * - Listing of collections is generally allowed only if the individual documents are intended to be public.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the articles collection.
     * @path /articles/{articleId}
     * @allow (get, list): Any user can read any article.
     * @allow (create): Any authenticated user can create an article. The 'id' field must match the articleId.
     * @allow (update, delete): Only the user who created the article can update or delete it.
     * @deny create: if the request.resource.data.id does not match the {articleId}
     * @principle Allows public read access with owner-only writes, enforcing relational integrity.
     */
    match /articles/{articleId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.id == articleId;

      allow update, delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
    }

       /**
     * @description Rules for the machines collection.
     * @path /machines/{machineId}
     * @allow (get, list): Any user can read any machine.
     * @allow (create): Any authenticated user can create a machine. The 'id' field must match the machineId.
     * @allow (update, delete): Only the user who created the machine can update or delete it.
     * @deny create: if the request.resource.data.id does not match the {machineId}
     * @principle Allows public read access with owner-only writes, enforcing relational integrity.
     */
    match /machines/{machineId} {
      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.id == machineId;

      allow update, delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
    }

    /**
     * @description Rules for the app settings document.
     * @path /app_settings/global
     * @deny (get, list, create, update, delete): No user can read or write app settings.
     * @principle Restricts access to application settings for security.
     */
    match /app_settings/global {
      allow get, list, create, update, delete: if false;
    }
  }
}